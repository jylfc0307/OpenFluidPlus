/**

\page use_fluidx Formats of input datasets

\tableofcontents

This part of the manual describes the FluidX file(s) format used to define a simulation dataset. Refer to the 
\ref use_apps part of this manual to run the simulations.

An OpenFLUID input dataset includes different informations, defined in one or
many files:
  \li the spatial domain definition
  \li the flux model definition
  \li the spatial domain attributes 
  \li the monitoring configuration  
  \li the discrete events
  \li the run configuration

All files must be placed into a directory that can be reached by the
OpenFLUID program used.\n
As OpenFLUID-Builder uses the FluidX format natively, 
the entire input dataset  can be created through the OpenFLUID-Builder software.\n
Out of OpenFLUID-Builder, these FluidX files can be created by hand or using external tools.
In this case, it is encouraged to write custom scripts in
dedicated software, such as Geographic Information Systems
(GIS) or scientific environments such as R.


\section user_fluidx_overview Overview

The FluidX file format is an XML based format for OpenFLUID input datasets.
The OpenFLUID input information can be provided by a one or many files using
this FluidX formatn with the <tt>.fluidx</tt> file extension.

Whatever the input information is put into one or many files, the following
sections must be defined in the input file(s) set:
<ul>
  <li> The <i>model</i> section defined by the \c \<model\> tag
  <li> The <i>spatial domain</i> section defined by the \c \<domain\> tag
  <li> The <i>run configuration</i> section defined by the \c \<run\> tag
  <li> The <i>monitoring</i> section defined by the \c \<monitoring\> tag  
</ul>
The order of these sections is not significant. All of these sections must be
inclosed into an \a openfluid section defined by the \c \<openfluid\>
tag.

\n

Summary view of the XML structure of FluidX files:
\code{.xml}
<?xml version="1.0" standalone="yes"?>
<openfluid>

  <model>
    <!-- here is the model definition -->
  </model>

  <domain>
    <!-- here is the spatial domain definition, associated data and events -->   
  </domain>

  <monitoring>
    <!-- here is the monitoring definition -->
  </monitoring>

  <run>
    <!-- here is the run configuration -->
  </run>

</openfluid>
\endcode


\section user_fluidx_sections Sections


\subsection user_fluidx_sections_model Model section


The coupled model is defined by an ordered set of simulators and/or data generators 
that will be automatically plugged and run by the OpenFLUID environment.
It can also include a section for global parameters which
apply to all simulators and generators. The global parameters may
be overridden by local parameters of simulators or generators.


The coupled model must be defined in a section delimited by the
\c \<model\> tag, and must be structured following these rules:
<ul>
  <li> Inside the \c \<model\> tag, there must be a set of
  \c \<simulator\>, \c \<generator\> and \c \<gparams\> tags
  <li> Each \c \<simulator\> tag must bring an \c ID attribute giving
  the identifier of the simulator; the value of the \c ID
  attribute must match the ID of an available and
  pluggable simulator.
  <li> Each \c \<simulator\> tag may include zero to many \c \<param\> tags giving
  parameters to the simulator. Each \c \<param\> tag must bring a \c name attribute giving
  the name of the parameter and a \c value attribute giving the value of the parameter.
  These parameters can be scalar or vector of integer values, floating point values, string values.
  In case of vector, the values of the vector are separated by a \c ; (semicolon).
  <li> Each \c \<generator\> tag must bring a \c varname attribute giving 
  the name of the produced variable, a \c unitsclass attribute giving the 
  unit class of the produced variable, a \c method attribute giving the 
  method used to produce the variable (\c fixed for constant value,
  \c random for random value in a range, \c interp for a time-interpolated
  value from given data series, \c inject for an
  injected value -no time interpolation- from given data series). An optional \c \<varsize\>
  attribute can be set in order to produce a vector variable instead of a scalar variable.
  <li> Each \c \<generator\> tag may include zero to many \c \<param\>
  tags giving parameters to the generator. Each \c \<param\> tag must bring
  a \c name attribute giving the name of the parameter and a \c value 
  attribute giving the value of the parameter.
  <li> A generator using the \c fixed method must provide a
  param named \c fixedvalue for the value to produce.
  <li> A generator using the \c random method must provide a
  param named \c min and a param named \c max delimiting the
  random range for the value to produce.
  <li> A generator using the \c inject or \c interp method must provide a
  param named \c sources giving the data sources filename and a param
  named \c distribution giving the distribution filename for the value to
  produce (see also \ref apdx_generators).
  <li> Each \c \<gparams\> tag may include zero to many \c \<param\>
  tags giving the global parameters. Each \c \<param\> tag
  must bring a \c name attribute giving the name of the parameter and a \c value 
  attribute giving the value of the parameter.
</ul>

\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <model>

    <gparams>
      <param name="gparam1" value="100" />
      <param name="gparam2" value="0.1" />
    </gparams>

    <simulator ID="example.simulatorA" />

    <generator varname="example.generator.fixed" unitsclass="EU1" method="fixed" varsize="11">
      <param name="fixedvalue" value="20" />
    </generator>

    <generator varname="example.generator.random" unitsclass="EU2" method="random">
      <param name="min" value="20.53" />
      <param name="max" value="50" />
    </generator>

    <simulator ID="example.simulatorB">
      <param name="param1" value="strvalue" />
      <param name="param2" value="1.1" />
      <param name="gparam1" value="50" />
    </simulator>

  </model>
</openfluid>
\endcode


\warning There must be only one model definition in the input dataset.

\warning The order of the simulators and data generators in the \c \<model\> section is important : 
this order will be the call order at initialization time, and the permanent call order in synchronized 
coupled model (not applicable for variable time coupled models)



\subsection user_fluidx_sections_spatialdomain Spatial domain section

\subsubsection user_fluidx_sections_spatialdomain_def Definition and connectivity


The spatial domain is defined by a set of spatial units that are connected each others.
These spatial units are defined by a numerical identifier (ID) and a class.
They also include information about the processing order of the unit in the class.
Each unit can be connected to zero or many other units from the same or a different unit class.
The spatial domain definition must be defined in a section delimited
by the \c \<definition\> tag, which is a sub-section of the \c domain
tag, and must be structured following these rules:
<ul>
  <li> Inside the \c \<definition\> tag, there must be a set of
  \c \<unit\> tags
  <li> Each \c \<unit\> tag must bring an \c ID attribute giving
  the identifier of the unit, a \c class attribute giving the class of
  the unit, a \c pcsorder attribute giving the process order in the
  class of the unit
  <li> Each \c \<unit\> tag may include zero or many \c \<to\> tags giving
  the outgoing connections to other units. Each \c \<to\> tag must bring an
  \c ID attribute giving the identifier of the connected unit and a
  \c class attribute giving the class of the connected unit
  <li> Each \c \<unit\> tag may include zero or many \c \<childof\>
  tags giving the parent units. Each \c \<childof\> tag must bring an
  \c ID attribute giving the identifier of the parent unit and a
  \c class attribute giving the class of the parent unit   
</ul>

\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <domain>
    <definition>

      <unit class="PU" ID="1" pcsorder="1" />

      <unit class="EU1" ID="3" pcsorder="1">
        <to class="EU1" ID="11" />
        <childof class="PU" ID="1" />
      </unit>
      
      <unit class="EU1" ID="11" pcsorder="3">
        <to class="EU2" ID="2" />
      </unit>
      
      <unit class="EU2" ID="2" pcsorder="1" />

    </definition>
  </domain>
</openfluid>
\endcode


\subsubsection user_fluidx_sections_spatialdomain_attrs Attributes

The spatial attributes are static data associated to each spatial unit,
usually properties and initial conditions.\n
The spatial domain attributes must be defined in a section delimited
by the \c \<attributes\> tag, which is a sub-section of the \c domain
tag, and must be structured following these rules:
<ul>
  <li> The \c \<attributes\> tag must bring an \c unitsclass
  attribute giving the unit class to which the attributes must be attached, and a
  \c colorder attribute giving the order of the contained column-formatted
  data
  <li> Inside the \c \<attributes\> tag, there must be the attributes as 
  row-column text. As a rule, the first column is the ID of the unit in the class
  given through the \c unitsclass attribute of \c \<attributes\>
  tag, the following columns are values following the column order given
  through the \c colorder attribute of the \c \<attributes\> tag.
  Values for the data can be real, integer, string, vector or matrix.
</ul>

\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <domain>
  
    <attributes unitsclass="EU1" colorder="indataA">
      3 1.1
      11 7.5
    </attributes>

    <attributes unitsclass="EU2" colorder="indataB1;indataB3">
      2 18 STRVALX
    </attributes>

  </domain>
</openfluid>
\endcode



\subsubsection user_fluidx_sections_spatialdomain_events Discrete events

The discrete events are events occurring on units, and can be processed by simulators. 
The spatial events must be defined in a section delimited
by the \c \<calendar\> tag, which is a sub-section of the \c \<domain\>
tag, and must be structured following these rules:

<ul>
  <li> Inside the \c \<calendar\> tag, there must be a set of \c \<event\> tags 
  <li> Each \c \<event\> tag must bring an \c unitID and an 
  \c unitsclass attribute giving the unit on which occurs the event, a 
  \c date attribute giving the date and time of the event. The date
  format must be "YYYY-MM-DD hh:mm:ss".
  <li> Each \c \<event\> tag may include zero to many \c \<info\> tags.
  <li> Each \c \<info\> tag give information about the event and must
  bring a \c key attribute giving the name (the "key") of the info, and a
  \c value attribute giving the value for this key.
</ul>  
  
\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <domain>
    <calendar>

      <event unitsclass="EU1" unitID="11" date="1999-12-31 23:59:59">
        <info key="when" value="before" />
        <info key="where" value="1" />
        <info key="var1" value="1.13" />
        <info key="var2" value="EADGBE" />
      </event>
      <event unitsclass="EU2" unitID="3" date="2000-02-05 12:37:51">
        <info key="var3" value="152.27" />
        <info key="var4" value="XYZ" />
      </event>
      <event unitsclass="EU1" unitID="11" date="2000-02-25 12:00:00">
        <info key="var1" value="1.15" />
        <info key="var2" value="EADG" />
      </event>

    </calendar>
  </domain>
</openfluid>
\endcode




\subsection user_fluidx_sections_datastore Datastore section

The datastore lists external data which is available during the simulation.
The datastore content must be defined in a section delimited by the
\c \<datastore\> tag, and must be structured following these rules:
<ul>
  <li> Inside the \c \<datastore\> tag, there must be a set of \c \<dataitem\> tags
  <li> Each \c \<dataitem\> tag must bring an \c ID attribute giving
  the unique identifier of the dataitem, a \c type attribute giving the type
  of the dataitem (only the geovector and georaster types are currently available), and a \c source 
  attribute giving the source of the dataitem. An optional \c unitsclass 
  attribute is possible for giving the spatial unit class associated to the data. 
</ul>

\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <datastore>
  
    <dataitem id="TUlayer" type="geovector" source="TestUnits_wgs84.shp" 
              unitsclass="TestUnits" />
    <dataitem id="Ground" type="geovector" source="data/ground.shp" />
    <dataitem id="Ground" type="georaster" source="data/DEM.tiff" />

  </datastore>
</openfluid>
\endcode



\subsection user_fluidx_sections_monitoring Monitoring section

The monitoring is defined by a set of observers that will be automatically 
plugged and executed by the OpenFLUID environment.
Observers are usually used for exporting formatted data from the simulation or performs
continuous control during the simulation.\n

\note OpenFLUID provides observers for exporting data to CSV formatted files,
KML formatted files (for use with Google Earth), and DOT formatted files (for graph representations). 


The monitoring must be defined in a section delimited by the
\c \<monitoring\> tag, and must be structured following these rules:
<ul>
  <li> Inside the \c \<monitoring\> tag, there may be a set of
  \c \<observer\> tags
  <li> Each \c \<observer\> tag must bring an \c ID attribute giving
  the identifier of the observer; the value of the \c ID
  attribute must match the ID of an available and
  pluggable observer.
  <li> Each \c \<observer\> tag may include zero to many \c \<param\> tags giving
  parameters to the observer. Each \c \<param\> tag must bring a \c name attribute giving
  the name of the parameter and a \c value attribute giving the value of the parameter.
  These parameters can be scalar or vector of integer values, floating point values, string values.
</ul>


\note Refer to observers signatures for details about specific parameters for each observer. 


\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <monitoring>
    
    <observer ID="export.vars.files.csv">
      <param name="format.f1.header" value="colnames-as-comment" />
      <param name="format.f1.date" value="%Y-%m-%d %H:%M:%S" />
      <param name="format.f1.precision" value="8" />
            
      <param name="format.f2.header" value="full" />  
  
      <param name="set.s1.unitsclass" value="TestUnits" />
      <param name="set.s1.unitsIDs" value="*" />
      <param name="set.s1.vars" value="*" />
      <param name="set.s1.format" value="f1" />
      
      <param name="set.s2.unitsclass" value="TestUnits" />
      <param name="set.s2.unitsIDs" value="5;3;11" />
      <param name="set.s2.vars" value="tests.double;tests.string" />
      <param name="set.s2.format" value="f2" />
    </observer>
    
    <observer ID="export.vars.files.kml-anim" >
      <param name="layers.anim.unitsclass" value="TestUnits" />
      <param name="layers.anim.varname" value="tests.double" />
      <param name="layers.anim.sourcetype" value="file" />
      <param name="layers.anim.sourcefile" value="TestUnits_wgs84.shp" />
      <param name="layers.anim.linewidth" value="4" />
      <param name="layers.anim.colorscale" 
        value="ff00ff00;14;ff00ff76;18;ff00ffdc;22;ff00faff;26;ff0099ff;28;ff001cff"/>

      <param name="layers.static.1.unitsclass" value="OtherUnits" />
      <param name="layers.static.1.sourcetype" value="file" />
      <param name="layers.static.1.sourcefile" value="OtherUnits_wgs84.shp" />
      <param name="layers.static.1.linewidth" value="3" />
      <param name="layers.static.1.color" value="ffffffff" />
    </observer>        
    
  </monitoring>
</openfluid>
\endcode

\warning There must be only one monitoring definition in the input dataset.



\subsection user_fluidx_sections_run Run configuration section

The configuration of the simulation gives the simulation period, the default coupling time step
and the optional coupling constraint.
The run configuration must be defined in a section delimited by the
\c \<run\> tag, and must be structured following these rules:
<ul>
  <li> Inside the \c \<run\> tag, there must be a \c \<scheduling\> tag
  giving the scheduling informations of the model coupling.
  <li> The \c \<scheduling\> tag must bring a \c deltat attribute 
  giving the number of second for the default DeltaT time step, 
  and a \c constraint attribute giving an optional constraint applied to the coupling.
  The values for the \c constraint attribute can be \c none for no constraint,
  \c dt-checked to check that coupling is synchronized with the default DeltaT time step,
  \c dt-forced to force coupling at the default DeltaT time step 
  ignoring the scheduling requests from simulators or generators.
  <li> Inside the \c \<run\> tag, there must be a \c \<period\> tag
  giving the simulation period.
  <li> The \c \<period\> tag must bring a \c begin and an
  \c end attributes, giving the dates of the beginning and the end of the
  simulation period. The date format for these attributes must be
  <tt>YYYY-MM-DD hh:mm:ss</tt>
  <li> Inside the \c \<run\> tag, there may be a \c \<valuesbuffer\>
  tag for the number of produced values kept in memory. The number of values is given
  through a \c size attribute. If not present, all values are kept in memory.
</ul>

\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <run>
  
    <scheduling deltat="3600" constraint="none" />
    <period begin="2000-01-01 00:00:00" end="2000-06-30 23:59:00" />
    
    <valuesbuffer size="10" />
    
  </run>
</openfluid>
\endcode


\section user_fluidx_params_replacements Runtime variables in parameters

Parameters of simulators and observers can include variables that will be replaced by corresponding values at runtime.
These variables are :
<ul>
<li><tt>${dir.input}</tt> is replaced by the complete path to the input dataset directory
<li><tt>${dir.output}</tt> is replaced by the complete path to the output results directory
<li><tt>${dir.temp}</tt> is replaced by the complete path to the directory dedicated to temporary files
</ul> 

\code
<?xml version="1.0" standalone="yes"?>
<openfluid>
  <model>

    <gparams>
      <param name="globaldata" value="${dir.input}/data/global" />
    </gparams>

    <simulator ID="example.simulatorA" >
      <param name="temppath" value="${dir.temp}/simA" />
    </simulator>
    
  </model>
</openfluid>
\endcode


\section use_fluidx_exmpl Example of an input dataset as a single FluidX file

\code
<?xml version="1.0" standalone="yes"?>
<openfluid>

  <model>
    <gparams>
      <param name="gparam1" value="100" />
      <param name="gparam2" value="0.1" />
    </gparams>
    <simulator fileID="example.simulatorA" />
    <generator varname="example.generator.fixed" unitsclass="EU1"
               method="fixed" varsize="11">
      <param name="fixedvalue" value="20" />
    </generator>
    <generator varname="example.generator.random" unitsclass="EU2" 
               method="random">
      <param name="min" value="20.53" />
      <param name="max" value="50" />
    </generator>
    <simulator fileID="example.simulatorB">
      <param name="param1" value="strvalue" />
      <param name="param2" value="1.1" />
      <param name="gparam1" value="50" />
    </simulator>
  </model>


  <domain>

    <definition>
      <unit class="PU" ID="1" pcsorder="1" />
      <unit class="EU1" ID="3" pcsorder="1">
        <to class="EU1" ID="11" />
        <childof class="PU" ID="1" />
      </unit>
      <unit class="EU1" ID="11" pcsorder="3">
        <to class="EU2" ID="2" />
      </unit>
      <unit class="EU2" ID="2" pcsorder="1" />
    </definition>

    <attributes unitsclass="EU1" colorder="indataA">
      3 1.1
      11 7.5
    </attributes>
    
    <attributes unitsclass="EU2" colorder="indataB1;indataB3">
      2 18 STRVALX
    </attributes>
    
    <calendar>
      <event unitsclass="EU1" unitID="11" date="1999-12-31 23:59:59">
        <info key="when" value="before" />
        <info key="where" value="1" />
        <info key="var1" value="1.13" />
        <info key="var2" value="EADGBE" />
      </event>
      <event unitsclass="EU2" unitID="3" date="2000-02-05 12:37:51">
        <info key="var3" value="152.27" />
        <info key="var4" value="XYZ" />
      </event>
      <event unitsclass="EU1" unitID="11" date="2000-02-25 12:00:00">
        <info key="var1" value="1.15" />
        <info key="var2" value="EADG" />
      </event>
    </calendar>
    
  </domain>


  <run>
    <scheduling deltat="3600" constraint="none" />
    <period begin="2000-01-01 00:00:00" end="2000-06-30 23:59:00" />
    <valuesbuffer size="10" />
  </run>


  <monitoring>
    <observer ID="export.vars.files.csv">
      <param name="format.f1.header" value="colnames-as-comment" />
      <param name="format.f1.date" value="%Y-%m-%d %H:%M:%S" />
      <param name="format.f1.precision" value="8" />
      <param name="format.f2.header" value="full" />  
      <param name="set.s1.unitsclass" value="TestUnits" />
      <param name="set.s1.unitsIDs" value="*" />
      <param name="set.s1.vars" value="*" />
      <param name="set.s1.format" value="f1" />
      <param name="set.s2.unitsclass" value="TestUnits" />
      <param name="set.s2.unitsIDs" value="5;3;11" />
      <param name="set.s2.vars" value="tests.double;tests.string" />
      <param name="set.s2.format" value="f2" />
    </observer>   
    <observer ID="export.vars.files.kml-anim" >
      <param name="layers.anim.unitsclass" value="TestUnits" />
      <param name="layers.anim.varname" value="tests.double" />
      <param name="layers.anim.sourcetype" value="file" />
      <param name="layers.anim.sourcefile" value="TestUnits_wgs84.shp" />
      <param name="layers.anim.linewidth" value="4" />
      <param name="layers.anim.colorscale" 
        value="ff00ff00;14;ff00ff76;18;ff00ffdc;22;ff00faff;26;ff0099ff;28;ff001cff"/>
      <param name="layers.static.1.unitsclass" value="OtherUnits" />
      <param name="layers.static.1.sourcetype" value="file" />
      <param name="layers.static.1.sourcefile" value="OtherUnits_wgs84.shp" />
      <param name="layers.static.1.linewidth" value="3" />
      <param name="layers.static.1.color" value="ffffffff" />
    </observer>         
  </monitoring>

</openfluid>
\endcode

\n 



*/
