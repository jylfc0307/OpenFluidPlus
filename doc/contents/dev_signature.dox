/**

\page dev_signature Declaration of the simulator signature

\tableofcontents

The signature has to be defined between the \if DocIsLaTeX \b BEGIN_SIMULATOR_SIGNATURE \else #BEGIN_SIMULATOR_SIGNATURE \endif
 and the \if DocIsLaTeX \b END_SIMULATOR_SIGNATURE \else #END_SIMULATOR_SIGNATURE \endif 
 macros.  

\section dev_signature_id Identification

The identification part of the signature must contain at least the ID of the simulator. 
This ID will be used by the framework to load simulators. It is declared in 
the signature as an argument of the \if DocIsLaTeX \b BEGIN_SIMULATOR_SIGNATURE \else #BEGIN_SIMULATOR_SIGNATURE \endif
 macro.\n 
Other optional informations can be included for better description of the simulator:
<ul>
<li>the simulator name, declared through the \if DocIsLaTeX \b DECLARE_NAME \else #DECLARE_NAME \endif
 macro,
allowing to assign a long name to the simulator
<li>the simulator description, declared through the \if DocIsLaTeX \b DECLARE_DESCRIPTION \else #DECLARE_DESCRIPTION \endif
 macro,
allowing to provide a detailed description of what the simulator actually does 
<li>the name(s) of the author(s) and her/his email address, declared through the \if DocIsLaTeX \b DECLARE_AUTHOR \else #DECLARE_AUTHOR \endif
 macro.
There may be multiple \if DocIsLaTeX \b DECLARE_AUTHOR \else #DECLARE_AUTHOR \endif
 macros in the signature in case of multiple authors
<li>the software version of the simulator, declared through the \if DocIsLaTeX \b DECLARE_VERSION \else #DECLARE_VERSION \endif
 macro
<li>the software status of the simulator, declared through the \if DocIsLaTeX \b DECLARE_STATUS \else #DECLARE_STATUS \endif
 macro. The value can be
openfluid::ware::EXPERIMENTAL, openfluid::ware::BETA or openfluid::ware::STABLE
</ul>

See the \ref dev_signature_exmpl part for detailed example. 


\section dev_signature_sci Informations about scientific application

The informations about scientific applications is only indicative.
It has no effects on simulator consistency or computational code.
These informations can be :
<ul>
<li> the domain in which the simulator can be applied, declared through the \if DocIsLaTeX \b DECLARE_DOMAIN \else #DECLARE_DOMAIN \endif
 macro
<li> the processes simulated by the simulator, declared through the \if DocIsLaTeX \b DECLARE_PROCESS \else #DECLARE_PROCESS \endif
 macro
<li> the numerical methods used by the simulator, declared through the \if DocIsLaTeX \b DECLARE_METHOD \else #DECLARE_METHOD \endif
 macro
</ul>

\section dev_signature_data Data and spatial graph 

The data used by the simulators can be:
<ul>
<li> Parameters that are attached to the simulator
<li> Spatial attributes that are attached to spatial units, giving properties about the spatial units
<li> Simulation variables that are attached to spatial units, representing the resulting dynamics of modeled processes
over the spatial units
<li> Discrete events that are attached to spatial units, 
representing the events occurring at a given date and time on a given spatial unit
<li> Specific file(s) loaded by the simulator 
</ul>
These data can be accessed, appended and/or modified by the simulator.\n
\n
The spatial graph representing the landscape can also be accessed or modified 
by simulators during simulations.\n 
\n
The declarations of spatial data access include constraint levels:
<ul>
<li>REQUIRED, this means that the data must be available or already produced
<li>USED, this means that the data are used only if they are available or already produced
</ul> 

\subsection dev_signature_data_simparams Simulator parameters

Simulator parameters are values provided to each simulator, 
and are declared using the \if DocIsLaTeX \b DECLARE_REQUIRED_PARAMETER or \b DECLARE_USED_PARAMETER
\else #DECLARE_REQUIRED_PARAMETER or #DECLARE_USED_PARAMETER \endif
 macros.
These macros takes 3 arguments
<ul>
<li>the name of the parameter
<li>the description of the parameter (may be empty)
<li>the SI unit of the parameter (may be empty)
</ul>

<i>Example of a simulator parameter declaration:</i>
\code
  DECLARE_REQUIRED_PARAMETER("meanspeed","mean speed to use","m/s")
\endcode


\subsection dev_signature_data_attrs Spatial attributes

Spatial attributes are constant properties attached to each spatial units, 
and are declared using \if DocIsLaTeX \b DECLARE_REQUIRED_ATTRIBUTE or \b DECLARE_USED_ATTRIBUTE
\else #DECLARE_REQUIRED_ATTRIBUTE or #DECLARE_USED_ATTRIBUTE \endif
 macros

These macros take 4 arguments:
<ul>
<li>the name of the attribute
<li>the units class
<li>the description of the attribute (may be empty)
<li>the SI unit of the attribute (may be empty)
</ul>

<i>Example of attributes declaration:</i>
\code
  DECLARE_REQUIRED_ATTRIBUTE("area","TU","area of the Test Units","m")
  DECLARE_USED_ATTRIBUTE("landuse","OU","landuse of the Other Units","")
\endcode


\subsection dev_signature_data_vars Simulation variables

Simulation variables are attached to spatial units. They are produced, accessed and modified
by simulators during simulations.\n
Accessed variables are declared using \if DocIsLaTeX \b DECLARE_REQUIRED_VARIABLE or \b DECLARE_USED_VARIABLE
\else #DECLARE_REQUIRED_VARIABLE or #DECLARE_USED_VARIABLE \endif
 macros,
produced variables are declared using \if DocIsLaTeX \b DECLARE_PRODUCED_VARIABLE
\else #DECLARE_PRODUCED_VARIABLE \endif
 macro, 
updated variables are declared using \if DocIsLaTeX \b DECLARE_UPDATED_VARIABLE
\else #DECLARE_UPDATED_VARIABLE \endif
 macro.

These macros take 4 arguments:
<ul>
<li>the name of the variable
<li>the concerned unit class
<li>the description of the variable (may be empty)
<li>the SI unit of the variable (may be empty)
</ul>

These variables can be typed or untyped. 
When they are declared in the signature, the variable names suffixed by the [] symbol with a type name enclosed
are typed, i.e. each value for the variable must match the type of the variable.
If no type is mentioned, values for the variable can be of any type.\n
In case of typed variables, the type of a required or used variable by a simulator
must match the type of the variable set when it is produced.   

The type name for a declaration of a variable can be:
<ul>
<li> \c boolean for boolean values
<li> \c integer for long integer values
<li> \c double for double precision values
<li> \c string for string values
<li> \c vector for vector data
<li> \c matrix for matrix data
<li> \c map for associative key-value data
<li> \c tree for hierarchical key-value data
</ul>

These scenarios of variable exchanges between two A and B simulators run successfully:
<ul>
<li> simulator A produces an \e untyped variable var1,
simulator B requires/uses/updates an \e untyped variable var1
<li> simulator A produces a \e typed variable var1, 
simulator B requires/uses/updates an \e untyped variable var1
<li> simulator A produces a \e typed variable var1 of type \c double, 
simulator B requires/uses/updates a \e typed variable var1 of type \c double
</ul>

These scenarios of variable exchanges between two simulators are failing:
<ul>
<li> simulator A produces an \e untyped variable var1, 
simulator B requires/uses/updates a \e typed variable var1
<li> simulator A produces a \e typed variable var1 of type \c double, 
simulator B requires/uses/updates a \e typed variable var1 of type \c matrix 
</ul>

<i>Example of variable declarations:</i>
\code  
  DECLARE_REQUIRED_VARIABLE("varA[double]","TU","","m")
  DECLARE_USED_VARIABLE("varB","OU","simple var on Other Units","kg")
  DECLARE_PRODUCED_VARIABLE("VarB[vector]","TU","vectorized var on Test Units","kg")
  DECLARE_UPDATED_VARIABLE("VarC","TU","","")
\endcode


\subsection dev_signature_data_events Discrete events

Discrete events are attached to spatial units, They are accessed or appended by simulators during simulations,
and are declared using the \if DocIsLaTeX \b DECLARE_USED_EVENTS
\else #DECLARE_USED_EVENTS \endif
 macro.\n

The declaration macro takes 1 argument: the units class.

<i>Example of events declaration:</i>
\code
  DECLARE_USED_EVENTS("TU")
\endcode


\subsection dev_signature_data_extrafiles Extra files

Simulators can declare files that they load and manage. This helps users to provide the needed files, and also  
notifies the OpenFLUID framework to check the presence of the file if it is required.\n 
These files are declared using the \if DocIsLaTeX \b DECLARE_USED_EXTRAFILE
\else #DECLARE_USED_EXTRAFILE \endif
 or \if DocIsLaTeX \b DECLARE_REQUIRED_EXTRAFILE
\else #DECLARE_REQUIRED_EXTRAFILE \endif
 macros. 

The declaration macro takes 1 argument: the file name with relative path to the dataset path.

<i>Example of extra file declarations:</i>
\code
  DECLARE_USED_EXTRAFILE("fileA.dat")
  DECLARE_REQUIRED_EXTRAFILE("geo/zone.shp")
\endcode


\subsection dev_signature_data_spatial Spatial units graph

The spatial units graph representing the landscape can be modified by simulators.
These modifications are declared in the signature function using two macros.\n
 
The \if DocIsLaTeX \b DECLARE_UPDATED_UNITSGRAPH
\else #DECLARE_UPDATED_UNITSGRAPH \endif
 macro is used for declaration of the global units graph modification
that will occur during simulation. 
It is for information purpose only, and takes a description as a single argument.\n
 
The \if DocIsLaTeX \b DECLARE_UPDATED_UNITSCLASS
\else DECLARE_UPDATED_UNITSCLASS \endif 
 macro is used for declaration of units classes that will be affected, and how.
It takes two arguments:
<ul>
<li>the units class
<li>the description of the update (may be empty)
</ul>   

<i>Example of declarations for spatial units graph:</i>
\code
  DECLARE_UPDATED_UNITSGRAPH("update of the spatial graph for ...")
  DECLARE_UPDATED_UNITSCLASS("TU","")
\endcode

\section dev_signature_exmpl Complete signature example

The signature code below shows an example of a possible signature for a simulator.  
  
\code

BEGIN_SIMULATOR_SIGNATURE("example.simulator")

  DECLARE_NAME("Example simulator");
  DECLARE_DESCRIPTION("This simulator is an example");
  DECLARE_VERSION("13.05");
  DECLARE_STATUS(openfluid::ware::EXPERIMENTAL);
  DECLARE_AUTHOR("John","john@foobar.org");
  DECLARE_AUTHOR("Dave","dave@foobar.org");
  DECLARE_AUTHOR("Mike","mike@foobar.org");
  
  DECLARE_USED_PARAMETER("meanspeed","mean speed to use","m/s")
  
  DECLARE_REQUIRED_ATTRIBUTE("area","TU","area of the Test Units","m")
  DECLARE_USED_ATTRIBUTE("landuse","OU","landuse of the Other Units","")
  
  DECLARE_REQUIRED_VARIABLE("varA[double]","TU","","m")
  DECLARE_USED_VARIABLE("varB","OU","simple var on Other Units","kg")
  DECLARE_PRODUCED_VARIABLE("VarB[vector]","TU","vectorized var on Test Units","kg")
  DECLARE_UPDATED_VARIABLE("VarC","TU","","")
  
  DECLARE_USED_EVENTS("TU")
  
END_SIMULATOR_SIGNATURE


\endcode

*/